from base import LeetCodeProblem


class Problem(LeetCodeProblem):
    # for behaviours other than exact match between solution output and expected output
    # see # Testers in README.md
    """
    https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
    """
    def get_tests(self):
        # return test cases here
        return (
            # each test case has the following structure
            # ( parameter , expected output ),
            # # OR # #
            # ( (param1, param2), expected output ),
            ([1, ], 0),
            ([], 0),
            ([7, 6, 4, 3, 1], 0),
            ([7, 1, 5, 3, 6, 4], 5),
            ([65, 71, 53, 100, 128, 11, 28, 51, 76, 74, 22, 119, 115, 88, 75, 30, 116, 8, 115, 32, 96, 7, 87, 75, 73, 109, 106, 118, 36, 94, 100, 44, 36, 74, 22, 59, 16, 120, 51, 40, 47, 44, 23, 105, 74, 17, 69, 116, 118, 89, 0, 87, 91, 48, 8, 106, 96, 23, 112, 111, 65, 33, 115, 60, 128, 15, 25, 11, 7, 64, 57, 76, 120, 58, 28, 92, 15, 95, 17, 2, 120, 29, 29, 9, 1, 10, 0, 28, 78, 28, 84, 66, 111, 110, 48, 45, 32, 96, 18, 55, 22, 81, 23, 114, 111, 96, 107, 11, 125, 66, 72, 79, 88, 13, 58, 108, 38, 63, 49, 107, 72, 101, 62, 108, 42, 94, 23, 90, 65, 126, 98, 25, 25, 2, 127, 103, 104, 109, 73, 120, 27, 58, 36, 6, 20, 100, 105, 106, 43, 54, 24, 13, 17, 127, 51, 2, 33, 3, 98, 101, 100, 33, 95, 69, 104, 117, 61, 104, 32, 48, 128, 116, 108, 100, 22, 41, 108, 11, 102, 44, 50, 24, 7, 121, 70, 11, 20, 89, 100, 4, 47, 90, 119, 1, 38, 44, 90, 62, 109, 54, 47, 97, 57, 116, 61, 29, 66, 122, 95, 76, 36, 58, 115, 31, 32, 83, 97, 11, 5, 35, 17, 51, 80, 87, 84, 112, 120, 59, 41, 42, 78, 18, 1, 13, 23, 50, 107, 29, 0, 12, 104, 80, 83, 51, 126, 51, 72, 2, 87, 30, 103, 48, 109, 55, 65, 41, 108, 57, 116, 83, 33, 27, 18, 96, 102, 94, 23, 99, 85, 54, 110, 3, 97, 107, 90, 71, 25, 81, 126, 104, 117, 20, 74, 51, 43, 122, 71, 39, 3, 50, 87, 80, 18, 96, 30, 86, 115, 94, 87, 22, 60, 55, 61, 109, 12, 28, 72, 39, 123, 84, 10, 88, 125, 79, 101, 73, 13, 127, 22, 31, 65, 80, 12, 43, 80, 126, 44, 52, 26, 39, 100, 22, 84, 18, 103, 12, 83, 25, 96, 41, 57, 9, 69, 116, 104, 10, 124, 2, 123, 46, 103, 55, 86, 6, 17, 81, 118, 49, 0, 105, 49, 59, 96, 116, 31, 54, 118, 120, 69, 121, 25, 12, 120, 104, 14, 51, 8, 6, 27, 112, 6, 52, 82, 73, 68, 71, 76, 27, 2, 78, 34, 68, 3, 53, 28, 17, 117, 38, 21, 108, 95, 112, 106, 12, 17, 15, 104, 8, 16, 54, 89, 118, 120, 101, 119, 51, 25, 56, 12, 107, 16, 58, 102, 123, 19, 53, 76, 104, 117, 53, 128, 95, 73, 120, 88, 28, 3, 119, 70, 45, 98, 125, 87, 56, 62, 108, 71, 77, 5, 19, 31, 6, 3, 51, 91, 58, 30, 45, 64, 2, 118, 120, 91, 63, 2, 65, 114, 30, 70, 41, 115, 20, 29, 22, 115, 74, 54, 14, 75, 45, 77, 87, 61, 57, 39, 78, 67, 61, 65, 91, 24, 33, 52, 40, 15, 116, 44, 41, 8, 83, 5, 114, 122, 51, 99, 75, 120, 126, 110, 58, 14, 39, 13, 27, 2, 119, 123, 11, 107, 36, 96, 14, 31, 116, 77, 111, 6, 126, 106, 124, 42, 58, 75, 101, 32, 64, 66, 94, 52, 69, 98, 100, 36, 30, 81, 90, 37, 64, 106, 67, 97, 5, 107, 12, 83, 128, 55, 25, 39, 81, 108, 84, 21, 44, 2, 14, 102, 32, 116, 48, 60, 124, 113, 108, 38, 16, 57, 35, 98, 51, 103, 57, 77, 57, 22, 110, 28, 57, 125, 19, 72, 30, 127, 9, 1, 60, 18, 41, 4, 70, 44, 57, 71, 8, 27, 98, 51, 110, 31, 36, 14, 37, 29, 53, 78, 45, 115, 104, 52, 47, 69, 16, 101, 49, 73, 110, 41, 63, 128, 29, 8, 22, 3, 94, 90, 15, 19, 23, 78, 53, 85, 106, 93, 99, 22, 4, 37, 32, 12, 65, 35, 4, 71, 12, 32, 81, 5, 112, 70, 22, 25, 38, 90, 45, 126, 86, 59, 89, 100, 67, 127, 1, 100, 71, 1, 55, 92, 23, 126, 122, 61, 46, 44, 93, 92, 83, 108, 112, 88, 70, 117, 65, 120, 48, 109, 60, 18, 93, 125, 77, 55, 25, 109, 13, 99, 51, 53, 123, 107, 126, 39, 80, 2, 98, 72, 25, 32, 116, 85, 63, 69, 13, 9, 38, 102, 117, 113, 8, 50, 112, 34, 5, 73, 84, 88, 98, 98, 57, 56, 18, 111, 80, 3, 81, 62, 120, 74, 103, 109, 45, 66, 60, 26, 55, 87, 117, 115, 127, 62, 64, 68, 95, 26, 74, 53, 8, 14, 96, 20, 115, 76, 5, 128, 81, 116, 41, 124, 13, 59, 96, 3, 88, 4, 99, 100, 60, 122, 46, 41, 37, 114, 69, 69, 45, 22, 97, 105, 12, 47, 105, 123, 19, 117, 19, 116, 16, 121, 50, 44, 36, 86, 79, 35, 82, 3, 105, 4, 102, 61, 6, 107, 125, 53, 94, 90, 65, 115, 120, 97, 111, 15, 99, 35, 76, 78, 27, 33, 55, 84, 46, 126, 33, 57, 41, 89, 67, 54, 102, 67, 11, 50, 47, 45, 79, 9, 78, 44, 61, 40, 84, 27, 76, 12, 14, 2, 67, 61, 5, 15, 19, 9, 85, 92, 110, 122, 91, 65, 39, 103, 110, 8, 78, 76, 47, 70, 52, 113, 108, 96, 37, 52, 30, 81, 83, 45, 24, 69, 22, 26, 0, 93, 68, 23, 18, 103, 87, 121, 19, 75, 22, 12, 68, 5, 22, 40, 28, 97, 105, 34, 52, 76, 17, 92, 16, 31, 11, 99, 97, 117, 39, 52, 44, 92, 79, 77, 23, 71, 64, 112, 2, 36, 85, 93, 118, 102, 77, 20, 128, 17, 81, 74, 11, 1, 128, 3, 12, 38, 89, 117, 15, 80, 73, 38, 44, 107, 68, 109, 54, 17, 22, 41, 79, 81, 54, 45, 70, 52, 50, 35, 126, 96, 18, 65, 106, 73, 94, 51, 38, 9, 35, 99, 18, 109, 122, 97, 127, 62, 28, 16, 46], 128),
        )

    def solution(self, prices):
        # have fun ~ ^_^
        # iterate backwards through prices and construct a max after this point list
        maxes = []
        current_max = None
        for each_price in reversed(prices):
            if current_max is None or each_price > current_max:
                maxes.append(each_price)
                current_max = each_price
            else:
                maxes.append(current_max)
        # remember to reverse back
        maxes.reverse()

        # iterate through prices forwards and get max profit
        max_profit = 0
        for current_buy, max_sell_price in zip(prices, maxes):

            if max_sell_price - current_buy > max_profit:
                max_profit = max_sell_price - current_buy

        return max_profit


# instanciate your Problem class and run
prob = Problem()
prob.run()
