from base import LeetCodeProblem


class Problem(LeetCodeProblem):
    # for behaviours other than exact match between solution output and expected output
    # see # Testers in README.md
    """
    https://leetcode.com/problems/median-of-two-sorted-arrays/

    # attempt one
    make a min heap and add all elements into it, pop until median
    """
    def get_tests(self):
        # return test cases here
        return (
            # each test case has the following structure
            # ( parameter , expected output ),
            # # OR # #
            # ( (param1, param2), expected output ),
            (([1, 3], [2]), 2.0),
            (([1, 2], [3, 4]), 2.5),
            (([0, 0], [0, 0]), 0.0),
            (([0, 0, 2], [0, 0, 1]), 0.0),
            (([2], []), 2.0),
            ((
                 [11, 13, 19, 20, 25, 25, 27, 28, 30, 35, 42, 43, 46, 46, 46, 48, 51, 53, 58, 61, 64, 65, 73, 76, 78,
                  78, 79, 79, 85, 85, 90, 90, 94, 96, 105, 116, 117, 119, 119, 124, 128, 135, 138, 141, 142, 145, 152,
                  156, 158, 158, 158, 162, 163, 165, 173, 178, 179, 183, 189, 193, 196, 197, 200, 203, 203, 206, 209,
                  210, 213, 218, 219, 221, 221, 224, 227, 228, 232, 232, 234, 238, 242, 242, 248, 249, 250, 253, 255,
                  256, 259, 268, 275, 277, 278, 279, 284, 286, 288, 291, 293, 295, 298, 300, 302, 303, 305, 308, 308,
                  310, 312, 314, 315, 318, 320, 321, 321, 323, 323, 324, 328, 328, 330, 333, 340, 342, 347, 348, 351,
                  354, 356, 361, 362, 365, 370, 372, 373, 373, 389, 401, 405, 411, 412, 419, 421, 428, 428, 429, 439,
                  441, 441, 444, 447, 466, 469, 474, 476, 485, 486, 486, 500, 504, 509, 511, 511, 511, 512, 513, 515,
                  516, 521, 528, 529, 530, 531, 537, 541, 543, 545, 547, 551, 554, 555, 558, 563, 568, 573, 573, 585,
                  591, 592, 594, 595, 596, 596, 597, 602, 607, 611, 617, 628, 630, 635, 638, 646, 647, 647, 647, 676,
                  677, 682, 683, 683, 685, 693, 693, 697, 699, 699, 699, 704, 711, 712, 714, 715, 724, 730, 732, 741,
                  742, 744, 745, 752, 755, 755, 760, 762, 762, 762, 764, 770, 772, 772, 774, 774, 779, 789, 790, 795,
                  799, 803, 809, 811, 815, 821, 823, 824, 825, 836, 837, 840, 842, 844, 844, 844, 846, 850, 852, 859,
                  862, 866, 869, 872, 881, 889, 890, 892, 895, 895, 909, 910, 912, 913, 923, 930, 931, 935, 937, 937,
                  942, 942, 942, 944, 944, 957, 958, 958, 960, 963, 963, 964, 967, 968, 969, 972, 973, 974, 977, 980,
                  980, 980, 983, 984, 986, 988, 990, 991, 991, 993, 993, 998, 1001, 1004, 1004, 1008, 1008, 1010, 1010,
                  1011, 1011, 1013, 1019, 1019, 1020, 1024, 1030, 1030, 1037, 1043, 1046, 1048, 1051, 1052, 1058, 1063,
                  1063, 1064, 1065, 1071, 1076, 1078, 1079, 1081, 1082, 1086, 1086, 1091, 1093, 1097, 1105, 1110, 1115,
                  1115, 1122, 1125, 1129, 1133, 1136, 1143, 1143, 1146, 1149, 1149, 1150, 1158, 1163, 1163, 1169, 1172,
                  1173, 1176, 1185, 1191, 1200, 1202, 1218, 1221, 1225, 1225, 1227, 1230, 1232, 1235, 1236, 1240, 1240,
                  1241, 1245, 1247, 1254, 1255, 1257, 1265, 1269, 1270, 1270, 1273, 1274, 1275, 1275, 1276, 1279, 1281,
                  1283, 1284, 1285, 1288, 1291, 1291, 1294, 1295, 1296, 1311, 1315, 1315, 1318, 1324, 1334, 1340, 1341,
                  1343, 1345, 1348, 1350, 1351, 1355, 1358, 1359, 1362, 1363, 1367, 1370, 1373, 1376, 1378, 1380, 1385,
                  1387, 1397, 1398, 1401, 1405, 1408, 1409, 1410, 1414, 1420, 1422, 1428, 1436, 1440, 1440, 1447, 1452,
                  1455, 1457, 1458, 1459, 1459, 1460, 1466, 1466, 1468, 1470, 1471, 1477, 1483, 1492, 1492, 1496, 1497,
                  1498, 1499, 1501, 1502, 1516, 1521, 1529, 1530, 1532, 1546, 1551, 1552, 1553, 1556, 1559, 1565, 1566,
                  1567, 1568, 1580, 1586, 1591, 1593, 1597, 1603, 1604, 1607, 1607, 1608, 1612, 1615, 1617, 1621, 1622,
                  1626, 1627, 1629, 1632, 1634, 1654, 1655, 1661, 1670, 1672, 1679, 1681, 1682, 1685, 1689, 1693, 1696,
                  1698, 1703, 1706, 1714, 1725, 1730, 1741, 1746, 1754, 1757, 1758, 1759, 1760, 1765, 1765, 1766, 1767,
                  1770, 1775, 1776, 1776, 1778, 1785, 1786, 1787, 1788, 1788, 1789, 1791, 1792, 1794, 1798, 1798, 1805,
                  1806, 1808, 1808, 1816, 1821, 1822, 1823, 1825, 1825, 1832, 1835, 1836, 1843, 1845, 1845, 1845, 1854,
                  1856, 1867, 1870, 1876, 1878, 1886, 1903, 1923, 1929, 1930, 1931, 1934, 1934, 1934, 1935, 1940, 1940,
                  1946, 1947, 1950, 1953, 1966, 1974, 1976, 1978, 1979, 1985, 1987, 1988, 1989, 1990, 1992, 1993, 1996,
                  1997, 1999, 2002, 2003, 2005, 2019, 2021, 2023, 2035, 2036, 2043, 2046, 2057, 2058, 2059, 2060, 2061,
                  2070, 2071, 2073, 2074, 2074, 2075, 2084, 2088, 2093, 2093, 2096, 2102, 2108, 2117, 2121, 2127, 2128,
                  2129, 2129, 2134, 2143, 2146, 2148, 2149, 2149, 2150, 2153, 2154, 2157, 2158, 2160, 2161, 2161, 2165,
                  2166, 2169, 2172, 2181, 2184, 2187, 2190, 2190, 2192, 2195, 2196, 2197, 2197, 2197, 2197, 2199, 2202,
                  2208, 2212, 2213, 2214, 2219, 2224, 2228, 2233, 2239, 2240, 2246, 2252, 2252, 2255, 2259, 2259, 2260,
                  2264, 2266, 2266, 2272, 2273, 2276, 2279, 2284, 2290, 2292, 2297, 2303, 2307, 2308, 2310, 2314, 2316,
                  2316, 2316, 2317, 2317, 2325, 2325, 2327, 2327, 2330, 2330, 2334, 2341, 2341, 2343, 2345, 2345, 2348,
                  2350, 2353, 2355, 2355, 2357, 2358, 2360, 2365, 2366, 2367, 2380, 2382, 2387, 2389, 2392, 2395, 2404,
                  2408, 2414, 2419, 2420, 2423, 2428, 2429, 2432, 2442, 2443, 2447, 2449, 2450, 2452, 2453, 2454, 2455,
                  2457, 2464, 2465, 2469, 2469, 2469, 2474, 2474, 2475, 2477, 2486, 2491, 2496, 2500, 2505, 2505, 2507,
                  2513, 2518, 2520, 2521, 2522, 2532, 2542, 2544, 2552, 2552, 2553, 2553, 2554, 2554, 2558]
                 ,
                 [3, 5, 8, 9, 11, 12, 17, 22, 25, 26, 29, 40, 40, 45, 51, 57, 69, 75, 78, 78, 79, 81, 85, 87, 90, 93,
                  98, 99, 107, 108, 110, 112, 112, 114, 119, 120, 121, 122, 125, 125, 130, 134, 135, 141, 141, 141, 143,
                  149, 158, 158, 159, 159, 170, 172, 174, 174, 174, 179, 181, 188, 190, 191, 191, 200, 200, 207, 211,
                  212, 215, 215, 216, 219, 225, 229, 233, 237, 238, 245, 247, 250, 251, 251, 253, 253, 258, 262, 263,
                  265, 268, 272, 274, 275, 276, 283, 285, 289, 294, 296, 303, 316, 320, 325, 327, 327, 330, 332, 333,
                  335, 338, 341, 344, 346, 347, 357, 360, 360, 363, 366, 367, 368, 369, 370, 371, 372, 372, 374, 378,
                  379, 389, 391, 393, 397, 409, 410, 413, 416, 419, 420, 426, 426, 465, 466, 476, 480, 482, 483, 483,
                  483, 488, 491, 493, 495, 497, 500, 501, 504, 506, 508, 511, 512, 516, 519, 520, 530, 535, 535, 541,
                  542, 555, 555, 558, 560, 563, 563, 565, 566, 570, 572, 576, 582, 583, 586, 587, 587, 588, 593, 598,
                  601, 605, 608, 608, 612, 613, 622, 626, 628, 630, 633, 635, 637, 639, 648, 651, 653, 653, 653, 655,
                  656, 662, 664, 667, 667, 677, 681, 682, 690, 698, 704, 704, 709, 710, 713, 725, 731, 733, 734, 736,
                  740, 744, 755, 759, 761, 762, 764, 765, 772, 778, 783, 783, 787, 790, 792, 802, 806, 810, 811, 813,
                  820, 824, 827, 834, 837, 840, 842, 842, 845, 846, 849, 852, 853, 858, 858, 862, 864, 864, 868, 870,
                  871, 872, 874, 877, 879, 883, 886, 894, 905, 907, 915, 916, 926, 938, 942, 942, 944, 951, 955, 957,
                  958, 961, 962, 963, 966, 971, 977, 977, 984, 985, 985, 986, 991, 996, 1000, 1013, 1014, 1020, 1021,
                  1026, 1028, 1029, 1030, 1031, 1035, 1046, 1053, 1053, 1062, 1062, 1063, 1082, 1083, 1086, 1087, 1090,
                  1090, 1091, 1092, 1098, 1101, 1106, 1109, 1112, 1113, 1119, 1129, 1132, 1134, 1135, 1137, 1137, 1146,
                  1146, 1149, 1155, 1155, 1156, 1156, 1157, 1161, 1163, 1177, 1180, 1183, 1184, 1192, 1192, 1192, 1193,
                  1198, 1200, 1200, 1201, 1208, 1208, 1212, 1212, 1214, 1216, 1226, 1230, 1231, 1239, 1240, 1242, 1246,
                  1249, 1253, 1256, 1259, 1262, 1269, 1274, 1275, 1283, 1286, 1290, 1292, 1297, 1298, 1298, 1300, 1300,
                  1302, 1311, 1318, 1325, 1329, 1329, 1339, 1339, 1345, 1347, 1354, 1357, 1357, 1357, 1364, 1367, 1370,
                  1373, 1375, 1376, 1376, 1376, 1380, 1380, 1382, 1386, 1387, 1388, 1388, 1393, 1395, 1400, 1403, 1405,
                  1406, 1410, 1412, 1413, 1415, 1416, 1433, 1433, 1434, 1435, 1436, 1437, 1440, 1441, 1443, 1446, 1452,
                  1452, 1453, 1455, 1468, 1469, 1477, 1479, 1483, 1487, 1491, 1507, 1512, 1513, 1515, 1515, 1517, 1520,
                  1520, 1520, 1521, 1522, 1524, 1526, 1526, 1528, 1530, 1530, 1545, 1546, 1548, 1551, 1556, 1561, 1561,
                  1565, 1568, 1573, 1588, 1589, 1590, 1605, 1606, 1606, 1608, 1611, 1616, 1616, 1622, 1625, 1627, 1630,
                  1631, 1634, 1635, 1636, 1639, 1639, 1642, 1642, 1648, 1655, 1659, 1660, 1667, 1671, 1678, 1678, 1679,
                  1681, 1682, 1683, 1683, 1685, 1687, 1689, 1695, 1699, 1701, 1705, 1707, 1707, 1707, 1713, 1716, 1718,
                  1718, 1723, 1725, 1727, 1729, 1730, 1732, 1734, 1734, 1743, 1745, 1745, 1755, 1755, 1756, 1756, 1759,
                  1759, 1760, 1760, 1763, 1764, 1765, 1770, 1773, 1776, 1778, 1783, 1785, 1788, 1794, 1802, 1806, 1806,
                  1807, 1809, 1813, 1814, 1816, 1816, 1820, 1823, 1826, 1828, 1830, 1841, 1844, 1845, 1849, 1849, 1851,
                  1852, 1855, 1857, 1860, 1861, 1861, 1864, 1865, 1867, 1871, 1880, 1883, 1885, 1896, 1897, 1904, 1905,
                  1906, 1908, 1909, 1911, 1919, 1921, 1922, 1924, 1925, 1928, 1931, 1932, 1935, 1937, 1941, 1945, 1947,
                  1947, 1949, 1952, 1952, 1955, 1955, 1967, 1967, 1967, 1970, 1977, 1980, 1986, 1990, 1990, 1992, 1995,
                  2003, 2006, 2006, 2006, 2011, 2015, 2018, 2019, 2019, 2026, 2029, 2033, 2034, 2045, 2046, 2049, 2053,
                  2065, 2067, 2073, 2073, 2079, 2080, 2083, 2084, 2084, 2090, 2093, 2094, 2095, 2114, 2120, 2124, 2125,
                  2128, 2128, 2135, 2135, 2138, 2141, 2143, 2144, 2144, 2147, 2154, 2154, 2157, 2163, 2163, 2164, 2164,
                  2164, 2170, 2176, 2179, 2179, 2188, 2194, 2195, 2203, 2205, 2207, 2211, 2218, 2225, 2225, 2228, 2230,
                  2230, 2239, 2240, 2245, 2246, 2250, 2251, 2261, 2263, 2264, 2266, 2266, 2266, 2268, 2282, 2288, 2291,
                  2295, 2301, 2302, 2303, 2305, 2307, 2309, 2310, 2310, 2311, 2314, 2317, 2321, 2324, 2325, 2325, 2325,
                  2333, 2338, 2339, 2349, 2356, 2361, 2369, 2370, 2373, 2376, 2377, 2382, 2386, 2388, 2389, 2392, 2392,
                  2398, 2405, 2411, 2412, 2415, 2421, 2431, 2431, 2434, 2442, 2444, 2445, 2445, 2446, 2447, 2447, 2448,
                  2451, 2457, 2458, 2461, 2464, 2464, 2464, 2467, 2468, 2471, 2471, 2474, 2476, 2476, 2485, 2494, 2496,
                  2499, 2509, 2516, 2520, 2520, 2522, 2527, 2531, 2531, 2535, 2535, 2536, 2537, 2545, 2545, 2556, 2557,
                  2559]
             ), 1290.5),
        )

    def solution(self, nums1: [int], nums2: [int]) -> float:
        # have fun ~ ^_^
        class MinHeap:
            def __init__(self, initial_array=None, known_heap=False):
                if initial_array is None:
                    self.__array = []
                else:
                    self.__array = initial_array.copy()

                    if not known_heap:
                        # build heap property from leaves up
                        for i in range(len(initial_array)):
                            self._min_heapify(len(initial_array) - 1 - i, down_heap=True)

            def __len__(self):
                return len(self.__array)

            def min(self):
                return self.__array[0]

            def pop_min(self):
                value = self.__array[0]
                # pop end element and replace root, then restore heap property from root down
                self.__array[0] = self.__array.pop()
                self._min_heapify(0, down_heap=True)
                return value

            def push(self, value):
                self.__array.append(value)
                self._min_heapify(len(self.__array) - 1)

            def _min_heapify(self, __index, down_heap=False):
                parent = self.__array[__index]
                left_i = __index * 2 + 1
                left_child = self.__array[left_i] if left_i < self.__len__() else None
                right_child = self.__array[left_i + 1] if left_i + 1 < self.__len__() else None
                swap_index = None

                if (left_child is not None and parent > left_child) or (
                        right_child is not None and parent > right_child):
                    # heap property violated
                    # swap parent with smallest child

                    # the switch below is so long and repetitive
                    # TODO : find better way to resolve swap
                    if left_child is None:
                        swap_index = left_i + 1
                        swap_value = right_child
                    elif right_child is None:
                        swap_index = left_i
                        swap_value = left_child
                    # both children present, swap biggest
                    elif left_child < right_child:
                        swap_index = left_i
                        swap_value = left_child
                    else:
                        swap_index = left_i + 1
                        swap_value = right_child

                    # do the swap
                    self.__array[swap_index] = parent
                    self.__array[__index] = swap_value

                if down_heap and swap_index:
                    self._min_heapify(swap_index, down_heap=True)
                elif not down_heap and __index != 0:
                    self._min_heapify((__index - 1) // 2)

        # sorted arrays already has min heap property, no need to waste time
        heap = MinHeap(nums1, known_heap=True)

        # add all elements from nums 2
        for each_item in nums2:
            heap.push(each_item)

        middle_i = len(heap) // 2

        if len(heap) % 2 == 0:
            # median of even array is average of middle two
            # pop from heap until there is len // 2 + 1 left
            while len(heap) > middle_i + 1:
                heap.pop_min()

            median_left = heap.pop_min()
            median_right = heap.min()

            return (median_left + median_right) / 2
        else:
            # pop untill len // 2 + 1 left
            while len(heap) > middle_i + 1:
                heap.pop_min()

            return float(heap.min())


# instanciate your Problem class and run
prob = Problem()
prob.run()
